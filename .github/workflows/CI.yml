#               Copyright John Nunley, 2022.
# Distributed under the Boost Software License, Version 1.0.
#       (See accompanying file LICENSE or copy at
#         https://www.boost.org/LICENSE_1_0.txt)

name: CI

on:
  push:
    branches:
      - master
  pull_request:

env:
  BREADX_EXAMPLE_TIMEOUT: 1
  RUSTFLAGS: -Dwarnings
  clippy_version: 1.60.0

jobs:
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - rust: stable
    
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
      - name: Run rustfmt
        run: |
          if ! rustfmt --check --edition 2021 $(git ls-files '*.rs'); then
            printf "Please fix rustfmt errors.\n" >&2
            exit 1
          fi
  clippy:
    name: clippy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.clippy_version }}
          override: true
          components: clippy
      - uses: Swatinem/rust-cache@v1
      - name: Run Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all --tests --all-features

  # copy-pasted from async-io
  cross:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Install Rust
      run: rustup update stable
    - name: Install cross
      uses: taiki-e/install-action@cross
    - name: Android
      if: startsWith(matrix.os, 'ubuntu')
      run: cross test --target arm-linux-androideabi
    - name: NetBSD
      if: startsWith(matrix.os, 'ubuntu')
      run: cross build --target x86_64-unknown-netbsd
    - name: iOS
      if: startsWith(matrix.os, 'macos')
      run: cross build --target aarch64-apple-ios

  test:
    name: run tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest
        toolchain:
          - stable
        include:
          - os: ubuntu-latest
            toolchain: beta
          - os: ubuntu-latest
            toolchain: nightly
          - os: ubuntu-latest
            toolchain: 1.49.0 # msrv

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          override: true
      - uses: Swatinem/rust-cache@v1

      # run tests for all crates
      - name: Default Features Test
        run: cargo test

      # run tests with no default features
      - name: No Default Features Test
        run: cargo test --no-default-features --tests
        working-directory: breadx

      - name: No Default Features Test (All Extensions)
        run: cargo test --no-default-features --features all-extensions --tests
        working-directory: breadx

      # run tests with all features
      - name: All Features Test
        run: cargo test --all-features
        working-directory: breadx

      # run tests for just async
      - name: Async Test
        run: cargo test --features async
        working-directory: breadx

      - name: Async Test (All Extensions)
        run: cargo test --features async all-extensions
        working-directory: breadx

      # run pl tests
      - name: Parking Lot Test
        run: cargo test --features pl all-extensions
        working-directory: breadx

      # run all examples
      # took this from x11rb's ci
      - name: Run Examples (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
            cd breadx
            for example in examples/*.rs; do
              example=${example/examples\//}
              example=${example/.rs/}
              xvfb-run -a cargo run --example "$example" --all-features
            done

      # run examples on windows
      - uses: cygwin/cygwin-install-action@master
        if: startsWith(matrix.os, 'windows')
        with:
          packages: xorg-server-extra

      - name: Run Examples (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: powershell
        env:
          DISPLAY: 127.0.0.1:0
        run: |
          $xvfb = Start-Process -PassThru -FilePath C:\cygwin\bin\Xvfb.exe -ArgumentList "-listen tcp :0"
          Get-ChildItem breadx/examples |
            Where {$_.extension -eq ".rs"} |
            Foreach-Object {
            
            cargo run --example $($_.BaseName) --all-features

            if ($LASTEXITCODE -ne 0) {
              throw "Example $($_.BaseName) failed"
            }
          }
          Stop-Process -Id $xvfb.Id



      
  
